{
  "_args": [
    [
      {
        "raw": "toobusy-js",
        "scope": null,
        "escapedName": "toobusy-js",
        "name": "toobusy-js",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/srv/haraka_new/config"
    ]
  ],
  "_from": "toobusy-js@latest",
  "_id": "toobusy-js@0.5.1",
  "_inCache": true,
  "_location": "/toobusy-js",
  "_nodeVersion": "6.2.2",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/toobusy-js-0.5.1.tgz_1467899209258_0.5098914674017578"
  },
  "_npmUser": {
    "name": "strml",
    "email": "samuel.trace.reed@gmail.com"
  },
  "_npmVersion": "3.9.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "toobusy-js",
    "scope": null,
    "escapedName": "toobusy-js",
    "name": "toobusy-js",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/toobusy-js/-/toobusy-js-0.5.1.tgz",
  "_shasum": "5511f78f6a87a6a512d44fdb0efa13672217f659",
  "_shrinkwrap": null,
  "_spec": "toobusy-js",
  "_where": "/srv/haraka_new/config",
  "bugs": {
    "url": "https://github.com/STRML/node-toobusy/issues"
  },
  "dependencies": {},
  "description": "Don't fall over when your Node.JS server is too busy. Now without native dependencies!",
  "devDependencies": {
    "mocha": "1.7.0",
    "pre-commit": "^1.0.5",
    "should": "1.2.1"
  },
  "directories": {},
  "dist": {
    "shasum": "5511f78f6a87a6a512d44fdb0efa13672217f659",
    "tarball": "https://registry.npmjs.org/toobusy-js/-/toobusy-js-0.5.1.tgz"
  },
  "engines": {
    "node": ">=0.9.1"
  },
  "gitHead": "ce714acb8562dd4803334c5ac0a152bf79efcf48",
  "homepage": "https://github.com/STRML/node-toobusy",
  "license": "WTFPL",
  "maintainers": [
    {
      "name": "Samuel Reed",
      "email": "sam@tixelated.com"
    }
  ],
  "name": "toobusy-js",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://secure.travis-ci.org/STRML/node-toobusy.png)](http://travis-ci.org/STRML/node-toobusy)\n\n# Is Your Node Process Too Busy?\n\n`toobusy-js` is a fork of lloyd's [node-toobusy](http://github.com/lloyd/node-toobusy) that removes native dependencies\nin favor of using the `unref` introduced in [node 0.9.1](http://blog.nodejs.org/2012/08/28/node-v0-9-1-unstable/).\n\nThis package is a simpler install without native dependencies, but requires node >= 0.9.1.\n\n## Node-Toobusy\n\nWhat happens when your service is overwhelmed with traffic?\nYour server can do one of two things:\n\n  * Stop working, or...\n  * Keep serving as many requests as possible\n\nThis library helps you do the latter.\n\n## How it works\n\n`toobusy` polls the node.js event loop and keeps track of \"lag\",\nwhich is long requests wait in node's event queue to be processed.\nWhen lag crosses a threshold, `toobusy` tells you that you're *too busy*.\nAt this point you can stop request processing early\n(before you spend too much time on them and compound the problem),\nand return a \"Server Too Busy\" response.\nThis allows your server to stay *responsive* under extreme load,\nand continue serving as many requests as possible.\n\n## installation\n\n```\nnpm install toobusy-js\n```\n\n\n## usage\n\n```javascript\nvar toobusy = require('toobusy-js'),\n    express = require('express');\n\nvar app = express();\n\n// middleware which blocks requests when we're too busy\napp.use(function(req, res, next) {\n  if (toobusy()) {\n    res.send(503, \"I'm busy right now, sorry.\");\n  } else {\n    next();\n  }\n});\n\napp.get('/', function(req, res) {\n  // processing the request requires some work!\n  var i = 0;\n  while (i < 1e5) i++;\n  res.send(\"I counted to \" + i);\n});\n\nvar server = app.listen(3000);\n\nprocess.on('SIGINT', function() {\n  server.close();\n  // calling .shutdown allows your process to exit normally\n  toobusy.shutdown();\n  process.exit();\n});\n```\n\n## tunable parameters\n\nThe library exposes a few knobs:\n\n`maxLag` - This number represents the maximum amount of time in milliseconds that the event queue is behind,\nbefore we consider the process *too busy*.\n`interval` - The check interval for measuring event loop lag, in ms.\n\n```javascript\nvar toobusy = require('toobusy-js');\n\n// Set maximum lag to an aggressive value.\ntoobusy.maxLag(10);\n\n// Set check interval to a faster value. This will catch more latency spikes\n// but may cause the check to be too sensitive.\ntoobusy.interval(250);\n\n// Get current maxLag or interval setting by calling without parameters.\nvar currentMaxLag = toobusy.maxLag(), interval = toobusy.interval();\n\ntoobusy.onLag(function(currentLag) {\n  console.log(\"Event loop lag detected! Latency: \" + currentLag + \"ms\");\n});\n```\n\nThe default maxLag value is 70ms, and the default check interval is 500ms.\nThis allows an \"average\" server to run at 90-100% CPU\nand keeps request latency at around 200ms.\nFor comparison, a maxLag value of 10ms results in 60-70% CPU usage,\nwhile latency for \"average\" requests stays at about 40ms.\n\nThese numbers are only examples,\nand the specifics of your hardware and application can change them drastically,\nso experiment!\nThe default of 70 should get you started.\n\n## Events\n\nAs of `0.5.0`, `toobusy-js` exposes an `onLag` method. Pass it a callback to be notified when\na slow event loop tick has been detected.\n\n## references\n\n> There is nothing new under the sun. (Ecclesiastes 1:9)\n\nThough applying \"event loop latency\" to node.js was not directly inspired by anyone else's work,\nthis concept is not new.  Here are references to others who apply the same technique:\n\n  * [Provos, Lever, and Tweedie 2000](http://www.kegel.com/c10k.html#tips) - \"notes that dropping incoming connections when the server is overloaded improved the shape of the performance curve.\"\n\n## license\n\n[WTFPL](http://wtfpl.org)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/STRML/node-toobusy.git"
  },
  "scripts": {
    "test": "mocha tests"
  },
  "version": "0.5.1"
}
